{% if argument.includeResources %}
import SwiftUI
import {{ argument.sharedFrameworkName }}

// MARK: - KalugaLabel

extension KalugaLabel {
    
    func toText() -> some View {
        switch self {
            case let label as KalugaLabel.Plain:
                return makePlainLabel(label: label)
            case let label as KalugaLabel.Styled:
                return makeStyledLabel(label: label)
            default:
                preconditionFailure("Unknown kaluga button type!")
        }
    }
}

extension View {
    public func textStyle(_ textStyle: TextStyle) -> some View {
        ModifiedContent(
            content: self,
            modifier: TextStyleModifier(textStyle: textStyle)
        )
    }
}

extension {{ argument.sharedFrameworkName }}.TextAlignment {
    
    var textAlignment: SwiftUI.TextAlignment {
        switch self {
            case TextAlignment.left:
                return .leading
            case TextAlignment.right:
                return .trailing
            case TextAlignment.end:
                return UIApplication.shared.userInterfaceLayoutDirection == .leftToRight ?
                    .trailing :
                    .leading
            case TextAlignment.start:
                return .leading
            case TextAlignment.center:
                return .center
            default:
                preconditionFailure("Unknown text alignment type!")
        }
    }
}

// MARK: - Private methods

private extension KalugaLabel {
    
    private func makePlainLabel(label: KalugaLabel.Plain) -> AnyView {
        // assemble the button
        return AnyView(
            Text(label.text)
                .textStyle(style)
        )
    }
    private func makeStyledLabel(label: KalugaLabel.Styled) -> AnyView {
        return AnyView(
            label.toAttributedText()
        )
    }
}

fileprivate struct TextStyleModifier: ViewModifier {
    let textStyle: TextStyle
    
    func body(content: Content) -> some View {
        content
            .font(Font(textStyle.font.withSize(CGFloat(textStyle.size))))
            .foregroundColor(Color(textStyle.color.uiColor))
            .multilineTextAlignment(textStyle.alignment.textAlignment)
    }
}
{% endif %}
