import SwiftUI
import {{ argument.sharedFrameworkName }}

enum BuilderType {
{% if argument.includeAlerts %}    case alertBuilder{% endif %}
{% if argument.includeHud %}    case hudBuilder{% endif %}
{% if argument.includeDatePicker %}    case datePickerBuilder{% endif %}
}

@available(*, deprecated, renamed: "ContainerView")
struct ViewControllerContainer: UIViewControllerRepresentable {
    private let viewController = UIViewController()
{% if argument.includeAlerts %}    private(set) var alertBuilder: AlertPresenter.Builder?{% endif %}
{% if argument.includeHud %}    private(set) var hudBuilder: HUD.Builder?{% endif %}
{% if argument.includeDatePicker %}    private(set) var datePickerBuilder: DateTimePickerPresenter.Builder?{% endif %}

    init(types: Set<BuilderType>) {
        for type in types {
            switch type {
{% if argument.includeAlerts %}            case .alertBuilder: alertBuilder = AlertPresenter.Builder(viewController: viewController){% endif %}
{% if argument.includeHud %}            case .hudBuilder: hudBuilder = HUD.Builder(viewController: viewController){% endif %}
{% if argument.includeDatePicker %}            case .datePickerBuilder: datePickerBuilder = DateTimePickerPresenter.Builder(viewController: viewController){% endif %}
            }
        }
    }

    func makeUIViewController(
        context: UIViewControllerRepresentableContext<ViewControllerContainer>
    ) -> UIViewController {
        viewController
    }

    func updateUIViewController(
        _ uiViewController: UIViewController,
        context: UIViewControllerRepresentableContext<ViewControllerContainer>
    ) { }
}
