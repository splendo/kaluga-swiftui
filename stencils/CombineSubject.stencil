import SwiftUI
import Combine
import {{ argument.sharedFrameworkName }}

typealias KalugaDate = {{ argument.sharedFrameworkName }}.Date

@available(*, deprecated, renamed: "Subject")
class CombineSubject<Output: Equatable, Input: AnyObject & Equatable>: ObservableObject {
    @Published var value: Output
    private var input: Input?
    private let disposeBag = DisposeBag()
    var subscription: AnyCancellable!

    init(
        _ architectureSubject: ArchitectureSubject<Input>,
        defaultValue: Output,
        animated: Bool = false,
        toMapper: @escaping (Input) -> Output,
        fromMapper: @escaping (Output) -> Input
    ) {
        self.input = architectureSubject.currentOrNull
        func currentOrDefault() -> Output {
            if let current = architectureSubject.currentOrNull {
                return toMapper(current)
            } else {
                return defaultValue
            }
        }
        self.value = currentOrDefault()
        architectureSubject
            .observe { [weak self] newValue in
                guard let self = self else {
                    return
                }
                defer {
                    self.input = newValue
                }
                guard newValue != nil, self.input != newValue else {
                    return
                }
                if animated {
                    withAnimation {
                        self.value = toMapper(newValue!)
                    }
                } else {
                    self.value = toMapper(newValue!)
                }
            }
            .addTo(disposeBag: disposeBag)
        subscription = _value.projectedValue
            .sink { value in
                let typedCurrentValue: Output = currentOrDefault()
                guard value != typedCurrentValue else {
                    return
                }
                architectureSubject.post(newValue: fromMapper(value))
            }
    }

    deinit {
        disposeBag.dispose()
    }
}

class SimpleCombineSubject<T: AnyObject & Equatable>: CombineSubject<T, T> {
    init(
        _ architectureSubject: ArchitectureSubject<T>,
        defaultValue: T
    ) {
        super.init(
            architectureSubject,
            defaultValue: defaultValue,
            toMapper: { $0 },
            fromMapper: { $0 }
        )
    }
}

@available(*, deprecated, renamed: "StringSubject")
class StringCombineSubject: CombineSubject<String, NSString> {
    init(
        _ architectureSubject: ArchitectureSubject<NSString>,
        defaultValue: String = ""
    ) {
        super.init(
            architectureSubject,
            defaultValue: defaultValue,
            toMapper: { String($0) },
            fromMapper: { $0 as NSString }
        )
    }
}

@available(*, deprecated, renamed: "IntSubject")
class IntCombineSubject: CombineSubject<Int, KotlinInt> {
    init(
        _ architectureSubject: ArchitectureSubject<KotlinInt>,
        defaultValue: Int = 0,
        animated: Bool = false
    ) {
        super.init(
            architectureSubject,
            defaultValue: defaultValue,
            animated: animated,
            toMapper: { $0.intValue },
            fromMapper: { KotlinInt(value: Int32($0)) }
        )
    }
}

@available(*, deprecated, renamed: "FloatSubject")
class FloatCombineSubject: CombineSubject<Float, KotlinFloat> {
    init(
        _ architectureSubject: ArchitectureSubject<KotlinFloat>,
        defaultValue: Float = 0
    ) {
        super.init(
            architectureSubject,
            defaultValue: defaultValue,
            toMapper: { $0.floatValue },
            fromMapper: { KotlinFloat(value: $0) }
        )
    }
}

@available(*, deprecated, renamed: "DoubleSubject")
class DoubleCombineSubject: CombineSubject<Double, KotlinDouble> {
    init(
        _ architectureSubject: ArchitectureSubject<KotlinDouble>,
        defaultValue: Double = 0
    ) {
        super.init(
            architectureSubject,
            defaultValue: defaultValue,
            toMapper: { $0.doubleValue },
            fromMapper: { KotlinDouble(value: $0) }
        )
    }
}

@available(*, deprecated, renamed: "BoolSubject")
class BoolCombineSubject: CombineSubject<Bool, KotlinBoolean> {
    init(
        _ architectureSubject: ArchitectureSubject<KotlinBoolean>,
        defaultValue: Bool = false
    ) {
        super.init(
            architectureSubject,
            defaultValue: defaultValue,
            toMapper: { $0.boolValue },
            fromMapper: { KotlinBoolean(value: $0) }
        )
    }
}

// @available(*, deprecated, renamed: "DateSubject")
// class DateCombineSubject: CombineSubject<Foundation.Date, KalugaDate> {
//     init(
//         _ architectureSubject: ArchitectureSubject<KalugaDate>,
//         defaultValue: Foundation.Date = .init()
//     ) {
//         super.init(
//             architectureSubject,
//             defaultValue: defaultValue,
//             toMapper: { $0.toSwiftDate() },
//             fromMapper: { $0.toKalugaDate() }
//         )
//     }
// }
