import SwiftUI
import Combine

class RoutingState: ObservableObject {

    @Published var isPresented = false

    {% if !argument.navigationAnimationEnabled %}
    func show(animated: Bool = false, force: Bool = false) {
    {% endif %}
    {% if argument.navigationAnimationEnabled %}
    func show(animated: Bool = true, force: Bool = false) {
    {% endif %}
        setPresented(true, animated: animated, force: force)
    }

    {% if !argument.navigationAnimationEnabled %}
    func close(animated: Bool = false, force: Bool = false) {
    {% endif %}
    {% if argument.navigationAnimationEnabled %}
    func close(animated: Bool = true, force: Bool = false) {
    {% endif %}
        setPresented(false, animated: animated, force: force)
    }

    fileprivate func setPresented(_ presented: Bool, animated: Bool, force: Bool) {
        if isPresented == presented && !force {
            return
        }

        // SwiftUI doesnt really support enabling/disabling animations out of the box
        // Settings this global variable is the only thing that works
        let navigationBarAnimationsEnabled = UINavigationBar.areAnimationsEnabled
        UINavigationBar.setAnimationsEnabled(animated)
        var transaction = Transaction()
        transaction.disablesAnimations = !animated
        withTransaction(transaction) {
            isPresented = presented
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 1) {
                UINavigationBar.setAnimationsEnabled(navigationBarAnimationsEnabled)
            }
        }
    }
}

class ObservableRoutingState: RoutingState {

    private var cancellable = Set<AnyCancellable>()

    {% if !argument.navigationAnimationEnabled %}
    init(_ observable: BoolObservable, animated: Bool = false) {
    {% endif %}
    {% if argument.navigationAnimationEnabled %}
    init(_ observable: BoolObservable, animated: Bool = true) {
    {% endif %}
        super.init()
        observable.$value
            .sink { [weak self] value in
                if value {
                    self?.show(animated: animated, force: true)
                } else {
                    self?.close(animated: animated, force: false)
                }
            }
            .store(in: &cancellable)
    }
}

class ObjectRoutingState<T: Equatable>: RoutingState {

    private(set) var object: T?

    {% if !argument.navigationAnimationEnabled %}
    func show(_ object: T, animated: Bool = false) {
    {% endif %}
    {% if argument.navigationAnimationEnabled %}
    func show(_ object: T, animated: Bool = true) {
    {% endif %}
        let force: Bool
        if self.object != object {
            self.object = object
            force = true
        } else {
            force = false
        }
        super.show(animated: animated, force: force)
    }

    {% if !argument.navigationAnimationEnabled %}
    override func close(animated: Bool = false, force: Bool = false) {
    {% endif %}
    {% if argument.navigationAnimationEnabled %}
    override func close(animated: Bool = true, force: Bool = false) {
    {% endif %}
        object = nil
        super.close(animated: animated, force: force)
    }
}

class IdentifiableRoutingState<ID: Identifiable>: RoutingState, Identifiable {

    private(set) var id: ID.ID?

    {% if !argument.navigationAnimationEnabled %}
    func show(_ id: ID, animated: Bool = false) {
    {% endif %}
    {% if argument.navigationAnimationEnabled %}
    func show(_ id: ID, animated: Bool = true) {
    {% endif %}
        let force: Bool
        if self.id != id.id {
            self.id = id.id
            force = true
        } else {
            force = false
        }
        super.show(animated: animated, force: force)
    }

    {% if !argument.navigationAnimationEnabled %}
    override func close(animated: Bool = false, force: Bool = false) {
    {% endif %}
    {% if argument.navigationAnimationEnabled %}
    override func close(animated: Bool = true, force: Bool = false) {
    {% endif %}
        id = nil
        super.close(animated: animated, force: force)
    }
}

class IdentifiableObjectRoutingState<T>: IdentifiableRoutingState<T> where T: Equatable, T: Identifiable {

    private(set) var object: T?

    override var id: T.ID? {
        return object?.id
    }

    {% if !argument.navigationAnimationEnabled %}
    override func show(_ object: T, animated: Bool = false) {
    {% endif %}
    {% if argument.navigationAnimationEnabled %}
    override func show(_ object: T, animated: Bool = true) {
    {% endif %}
        let force: Bool
        if self.object != object {
            self.object = object
            force = true
        } else {
            force = false
        }
        super.show(animated: animated, force: force)
    }

    {% if !argument.navigationAnimationEnabled %}
    override func close(animated: Bool = false, force: Bool = false) {
    {% endif %}
    {% if argument.navigationAnimationEnabled %}
    override func close(animated: Bool = true, force: Bool = false) {
    {% endif %}
        object = nil
        super.close(animated: animated, force: force)
    }
}
