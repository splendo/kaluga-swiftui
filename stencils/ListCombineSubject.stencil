import SwiftUI
import Combine
import {{ argument.sharedFrameworkName }}

class ListCombineSubject<Input: Equatable, Output: Equatable>: ObservableObject {

    @Published private(set) var value: [Output]
    private var input: NSArray?
    private let disposeBag = DisposeBag()
    var subscription: AnyCancellable!

    init(
        _ architectureSubject: ArchitectureSubject<NSArray>,
        defaultValue: [Output] = [],
        animated: Bool = false,
        toItemMapper: @escaping (Input) -> Output,
        fromItemMapper: @escaping (Output) -> Input
    ) {
        func mapValues(array: NSArray?) -> [Output] {
            if let newValue = array {
                if let itemList = newValue as? [Input] {
                    return itemList.map(toItemMapper)
                } else {
                    return defaultValue
                }
            } else {
                return defaultValue
            }
        }
        input = architectureSubject.currentOrNull
        self.value = mapValues(array: input)
        architectureSubject
            .observe { [weak self] newValue in
                guard let self = self else {
                    return
                }
                defer {
                    self.input = newValue
                }
                guard newValue != nil, self.input != newValue else {
                    return
                }
                if animated {
                    withAnimation {
                        self.value = mapValues(array: newValue)
                    }
                } else {
                    self.value = mapValues(array: newValue)
                }
            }
            .addTo(disposeBag: disposeBag)
        subscription = _value.projectedValue
            .sink { value in
                let typedCurrentValue: [Output] = mapValues(array: architectureSubject.currentOrNull)
                guard value != typedCurrentValue else {
                    return
                }
                architectureSubject.post(newValue: NSArray(object: value.map(fromItemMapper)))
            }
    }
    deinit {
        disposeBag.dispose()
    }
}

class SimpleListCombineSubject<T: AnyObject & Equatable>: ListCombineSubject<T, T> {
    init(
        _ architectureSubject: ArchitectureSubject<NSArray>,
        defaultValue: [T] = []
    ) {
        super.init(
            architectureSubject,
            defaultValue: defaultValue,
            toItemMapper: { $0 }
        ) {
            $0
        }
    }
}
