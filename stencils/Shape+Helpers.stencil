{% if argument.includeResources %}
import SwiftUI

// needed in order to have shape types returned from
// methods using `some Shape` protocol
struct AnyShape: Shape {
    
    private let path: (CGRect) -> Path

    init<S: Shape>(_ wrapped: S) {
        path = { rect in
            let path = wrapped.path(in: rect)
            return path
        }
    }

    func path(in rect: CGRect) -> Path {
        return path(rect)
    }
}

// needed in order to have shape + stroke
extension Shape {
    
    func style<Fill: ShapeStyle, Stroke: ShapeStyle>(
        fill: Fill,
        stroke: Stroke,
        lineWidth: CGFloat = 1
    ) -> some View {
        self
            .stroke(stroke, lineWidth: lineWidth)
            .background(self.fill(fill))
    }
}

// needed in order to have shape + stroke
extension InsettableShape {
    
    func style<Fill: ShapeStyle, Stroke: ShapeStyle>(
        fill: Fill,
        stroke: Stroke,
        lineWidth: CGFloat = 1
    ) -> some View {
        self
            .strokeBorder(stroke, lineWidth: lineWidth)
            .background(self.fill(fill))
    }
}
{% endif %}
