{% if argument.includeResources %}
import SwiftUI
import {{ argument.sharedFrameworkName }}

// MARK: - KalugaButton

extension KalugaButton {
    
    func toButton() -> some View {
        let buttonView: AnyView
        
        switch self {
        case let button as KalugaButton.Plain:
            buttonView = makePlainButton(button: button)
        case let button as KalugaButton.Styled:
            buttonView = makeStyledButton(button: button)
        default:
            preconditionFailure("Unknown kaluga button type!")
        }
        
        return Button(
            action: {
                self.action()
            },
            label: {
                buttonView
            }
        )
        .buttonStyle(self.style, isEnabled: self.isEnabled)
    }
}

extension View {
    public func buttonStyle(_ buttonStyle: {{ argument.sharedFrameworkName }}.ButtonStyle, isEnabled: Bool = true) -> some View {
        ModifiedContent(
            content: self,
            modifier: ButtonStyleModifier(buttonStyle: buttonStyle, isEnabled: isEnabled)
        )
    }
}

// MARK: - Private methods

private extension KalugaButton {

    private var textStyle: TextStyle {
        return TextStyle(
            font: style.font,
            color: style.defaultStyle.textColor,
            size: style.textSize,
            alignment: style.textAlignment
        )
    }

    private func makePlainButton(button: KalugaButton.Plain) -> AnyView {
        // assemble the button
        return AnyView(
            Text(button.text)
                    .textStyle(textStyle)
        )
    }
    private func makeStyledButton(button: KalugaButton.Styled) -> AnyView {
        return AnyView(
            KalugaLabel.Styled(text: button.text, style: textStyle).toAttributedText()
        )
    }
}

// MARK: - CustomButtonStyle

private struct CustomButtonStyle: SwiftUI.ButtonStyle {
    private let buttonStyle: {{ argument.sharedFrameworkName }}.ButtonStyle
    private let isEnabled: Bool

    init(buttonStyle: {{ argument.sharedFrameworkName }}.ButtonStyle, isEnabled: Bool = true) {
        self.buttonStyle = buttonStyle
        self.isEnabled = isEnabled
    }
    func makeBody(configuration: Self.Configuration) -> some View {
        let stateStyle = stateStyle(isPressed: configuration.isPressed)
        return configuration.label
            .padding()
            .foregroundColor(stateStyle.textColor.swiftUI)
            .background(stateStyle.backgroundStyle)
    }

    private func stateStyle(isPressed: Bool) -> ButtonStateStyle {
        if !isEnabled {
            return buttonStyle.disabledStyle
        } else if isPressed {
            return buttonStyle.pressedStyle
        } else {
            return buttonStyle.defaultStyle
        }
    }
}

private struct ButtonStyleModifier: ViewModifier {
    let buttonStyle: {{ argument.sharedFrameworkName }}.ButtonStyle
    let isEnabled: Bool
    
    func body(content: Content) -> some View {
        content
            .buttonStyle(CustomButtonStyle(buttonStyle: buttonStyle, isEnabled: isEnabled))
            .disabled(!isEnabled)
    }
}
{% endif %}
