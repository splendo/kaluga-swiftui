// swiftlint:disable file_length
{% if argument.includeResources %}
import SwiftUI
import {{ argument.sharedFrameworkName }}

// MARK: - BackgroundStyle

struct KalugaBackgroundView<S : SwiftUI.Shape> : View {
    
    let style: KalugaBackgroundStyle
    
    private let shape: S
    private let stroke: KalugaBackgroundStyle.StrokeStyleStroke
    
    init(style: KalugaBackgroundStyle, shape: S) {
        self.style = style
        self.shape = shape
        self.stroke = KalugaBackgroundView.strokeStyle(style: style)
    }
    
    var body: some View {
        switch style.fillStyle {
        case let solid as KalugaBackgroundStyle.FillStyleSolid:
            ShapeView(
                shape: shape,
                fill: Color(solid.color.uiColor),
                stroke: Color(stroke.color.uiColor),
                lineWidth: CGFloat(stroke.width)
            )
        case let gradient as KalugaBackgroundStyle.FillStyleGradient:
            makeGradientView(gradient: gradient)
        default:
            preconditionFailure("Unknown fill style type!")
        }
    }
    
    @ViewBuilder
    func makeGradientView(
        gradient: KalugaBackgroundStyle.FillStyleGradient
    ) -> some View {
        switch gradient.gradientStyle {
        case let linear as GradientStyle.Linear:
            let gradient = self.makeGradientColor(colorPoints: linear.colorPoints)
            let linearPoints = makeLinearPoints(orientation: linear.orientation)
            ShapeView(
                shape: shape,
                fill: LinearGradient(
                    gradient: gradient,
                    startPoint: linearPoints.startPoint,
                    endPoint: linearPoints.endPoint
                ),
                stroke: Color(stroke.color.uiColor),
                lineWidth: CGFloat(stroke.width)
            )
        case let radial as GradientStyle.Radial:
            let gradient = self.makeGradientColor(colorPoints: radial.colorPoints)
            ShapeView(
                shape: shape,
                fill:
                    RadialGradient(
                        gradient: gradient,
                        center: .center,
                        startRadius: 0,
                        endRadius: CGFloat(radial.radius)
                    ),
                stroke: Color(stroke.color.uiColor),
                lineWidth: CGFloat(stroke.width)
            )
        case let angular as GradientStyle.Angular:
            let gradient = self.makeGradientColor(colorPoints: angular.colorPoints)
            ShapeView(
                shape: shape,
                fill:
                    AngularGradient(
                        gradient: gradient,
                        center: .center
                    ),
                stroke: Color(stroke.color.uiColor),
                lineWidth: CGFloat(stroke.width)
            )
        default:
            preconditionFailure("Unknown gradient style type!")
        }
    }
    func makeGradientColor(colorPoints: [GradientStyle.ColorPoint]) -> Gradient {
        Gradient(stops: colorPoints
            .map {
                Gradient.Stop(
                    color: Color($0.color.uiColor),
                    location: CGFloat($0.offset)
                )
            }
        )
    }
    func makeLinearPoints(orientation: GradientStyle.LinearOrientation) -> (startPoint: UnitPoint, endPoint: UnitPoint) {
        switch orientation {
        case .leftRight:
            return (startPoint: .leading, endPoint: .trailing)
        case .rightLeft:
            return (startPoint: .trailing, endPoint: .leading)
        case .topBottom:
            return (startPoint: .top, endPoint: .bottom)
        case .topLeftBottomRight:
            return (startPoint: .topLeading, endPoint: .bottomTrailing)
        case .topRightBottomLeft:
            return (startPoint: .topTrailing, endPoint: .bottomLeading)
        case .bottomTop:
            return (startPoint: .bottom, endPoint: .top)
        case .bottomLeftTopRight:
            return (startPoint: .bottomLeading, endPoint: .bottomTrailing)
        case .bottomRightTopLeft:
            return (startPoint: .bottomTrailing, endPoint: .bottomLeading)
        default:
            preconditionFailure("Unknown linear orientation type!")
        }
    }
    
    
    private static func strokeStyle(style: KalugaBackgroundStyle) -> KalugaBackgroundStyle.StrokeStyleStroke {
        switch style.strokeStyle {
        case let stroke as KalugaBackgroundStyle.StrokeStyleStroke:
            return stroke
        case is KalugaBackgroundStyle.StrokeStyleNone:
            return KalugaBackgroundStyle.StrokeStyleStroke(
                width: 0.0,
                color: KalugaColor.RGBColor(uiColor: .clear)
            )
        default:
            preconditionFailure("Unknown stroke style type!")
        }
    }
}

extension KalugaBackgroundStyle {
    
    @ViewBuilder
    func toView() -> some View {
        switch shape {
        case let rectangle as KalugaBackgroundStyle.ShapeRectangle:
            KalugaBackgroundView(
                style: self,
                shape: RoundedShape(
                    cornerRadii: .init(
                        width: CGFloat(rectangle.cornerRadiusX),
                        height: CGFloat(rectangle.cornerRadiusY)
                    ),
                    corners: {
                        var corners: UIRectCorner = []
                        if rectangle.roundedCorners.contains(.topLeft) { corners.insert(.topLeft) }
                        if rectangle.roundedCorners.contains(.topRight) { corners.insert(.topRight) }
                        if rectangle.roundedCorners.contains(.bottomLeft) { corners.insert(.bottomLeft) }
                        if rectangle.roundedCorners.contains(.bottomRight) { corners.insert(.bottomRight) }
                        return corners
                    }()
                )
            )
        case is KalugaBackgroundStyle.ShapeOval:
            KalugaBackgroundView(style: self, shape: Capsule(style: .circular))
        default: fatalError("Shape \(shape) is not a valid Shape")
        }
    }
}

extension View {
    public func background(_ backgroundStyle: KalugaBackgroundStyle, edgesIgnoringSafeArea: Edge.Set? = nil) -> some View {
        ModifiedContent(
            content: self,
            modifier: BackgroundStyleModifier(backgroundStyle: backgroundStyle, edgesIgnoringSafeArea: edgesIgnoringSafeArea ?? [])
        )
    }
}

private struct BackgroundStyleModifier: ViewModifier {
    let backgroundStyle: KalugaBackgroundStyle
    let edgesIgnoringSafeArea: Edge.Set
    
    func body(content: Content) -> some View {
        content
            .background(backgroundStyle.toView().ignoresSafeArea(edges: edgesIgnoringSafeArea))
    }
}

// MARK: - RoundedShape

private struct RoundedShape: Shape {
    var cornerRadii: CGSize = .zero
    var corners: UIRectCorner = .allCorners
    func path(in rect: CGRect) -> Path {
        let path = UIBezierPath.roundedRect(
            rect: rect,
            corners: corners,
            cornerRadii: cornerRadii
        )
        return Path(path.cgPath)
    }
}

private extension CGRect {
    var topRight: CGPoint { CGPoint(x: maxX, y: minY) }
    var topLeft: CGPoint { CGPoint(x: minX, y: minY) }
    var bottomRight: CGPoint { CGPoint(x: maxX, y: maxY) }
    var bottomLeft: CGPoint { CGPoint(x: minX, y: maxY) }
    func rightXOffset(cornerRadii: CGSize) -> CGFloat {
        return max(maxX - cornerRadii.width, midX)
    }
    func leftXOffset(cornerRadii: CGSize) -> CGFloat {
        return min(minX + cornerRadii.width, midX)
    }
    func topYOffset(cornerRadii: CGSize) -> CGFloat {
        return min(minY + cornerRadii.height, midY)
    }
    func bottomYOffset(cornerRadii: CGSize) -> CGFloat {
        return max(maxY - cornerRadii.height, midY)
    }
}

private extension UIBezierPath {
    static func roundedRect(
        rect: CGRect,
        corners: UIRectCorner = .allCorners,
        cornerRadii: CGSize
    ) -> UIBezierPath {
        let path = CGMutablePath()
        let start = CGPoint(x: rect.midX, y: rect.minY)
        path.move(to: start)
        if corners.contains(.topRight) {
            let topRightStart = CGPoint(x: rect.rightXOffset(cornerRadii: cornerRadii), y: rect.minY)
            path.addLine(to: topRightStart)
            let topRightEnd = CGPoint(x: rect.maxX, y: rect.topYOffset(cornerRadii: cornerRadii))
            path.addQuadCurve(to: topRightEnd, control: rect.topRight)
        } else {
            path.addLine(to: rect.topRight)
        }
        if corners.contains(.bottomRight) {
            let bottomRightStart = CGPoint(x: rect.maxX, y: rect.bottomYOffset(cornerRadii: cornerRadii))
            path.addLine(to: bottomRightStart)
            let bottomRightEnd = CGPoint(x: rect.rightXOffset(cornerRadii: cornerRadii), y: rect.maxY)
            path.addQuadCurve(to: bottomRightEnd, control: rect.bottomRight)
        } else {
            path.addLine(to: rect.bottomRight)
        }
        if corners.contains(.bottomLeft) {
            let bottomLeftStart = CGPoint(x: rect.leftXOffset(cornerRadii: cornerRadii), y: rect.maxY)
            path.addLine(to: bottomLeftStart)
            let bottomLeftEnd = CGPoint(x: rect.minX, y: rect.bottomYOffset(cornerRadii: cornerRadii))
            path.addQuadCurve(to: bottomLeftEnd, control: rect.bottomLeft)
        } else {
            path.addLine(to: rect.bottomLeft)
        }
        if corners.contains(.topLeft) {
            let topLeftStart = CGPoint(x: rect.minX, y: rect.topYOffset(cornerRadii: cornerRadii))
            path.addLine(to: topLeftStart)
            let topLeftEnd = CGPoint(x: rect.leftXOffset(cornerRadii: cornerRadii), y: rect.minY)
            path.addQuadCurve(to: topLeftEnd, control: rect.topLeft)
        } else {
            path.addLine(to: rect.topLeft)
        }
        path.addLine(to: start)
        return UIBezierPath(cgPath: path)
    }
}
{% endif %}
