{% if argument.includeResources %}
import SwiftUI
import {{ argument.sharedFrameworkName }}

// MARK: - BackgroundStyle

extension {{ argument.sharedFrameworkName }}.BackgroundStyle {

    func toView() -> some View {
        let shape: AnyShape
        
        // make the shape
        switch self.shape {
            case let rectangle as {{ argument.sharedFrameworkName }}.BackgroundStyle.ShapeRectangle:
                shape = AnyShape (
                    RoundedShape(
                        cornerRadii: .init(
                            width: CGFloat(rectangle.cornerRadiusX),
                            height: CGFloat(rectangle.cornerRadiusY)
                        ),
                        corners: {
                            var corners: UIRectCorner = []
                            if rectangle.roundedCorners.contains(.topLeft) { corners.insert(.topLeft) }
                            if rectangle.roundedCorners.contains(.topRight) { corners.insert(.topRight) }
                            if rectangle.roundedCorners.contains(.bottomLeft) { corners.insert(.bottomLeft) }
                            if rectangle.roundedCorners.contains(.bottomRight) { corners.insert(.bottomRight) }
                            return corners
                        }()
                    )
                )
            case is {{ argument.sharedFrameworkName }}.BackgroundStyle.ShapeOval:
                shape = AnyShape (
                    Capsule(style: .circular)
                )
            default:
                preconditionFailure("Unknown shape type!")
        }
        
        // apply stoke to shape if needed
        //
        // Due to is not possible to create the AnyShapeStyle as we did with AnyShape
        // and the fact that it was only introduced from iOS 15, we need to fall back to multiple
        // switches in order to create the anyView!
        // https://developer.apple.com/documentation/swiftui/anyshapestyle
        // https://developer.apple.com/documentation/swiftui/shapestyle
        /*
        switch buttonStateStyle.backgroundStyle.strokeStyle {
            case let stroke as {{ argument.sharedFrameworkName }}.BackgroundStyle.StrokeStyleStroke:
                anyView = AnyView(
                    shape
                        .style(
                            fillStyle: fillStyle(buttonStateStyle: buttonStateStyle),
                            strokeStyle: Color(stroke.color.uiColor),
                            lineWidth: CGFloat(stroke.width)
                        )
            default:
                anyView = AnyView(
                    shape
                        .fill(shapeStyle(buttonStateStyle: buttonStateStyle))
                )
        }
        */
        
        let finalStoke: {{ argument.sharedFrameworkName }}.BackgroundStyle.StrokeStyleStroke
        
        switch strokeStyle {
            case let stroke as {{ argument.sharedFrameworkName }}.BackgroundStyle.StrokeStyleStroke:
                finalStoke = stroke
            case is {{ argument.sharedFrameworkName }}.BackgroundStyle.StrokeStyleNone:
                finalStoke = {{ argument.sharedFrameworkName }}.BackgroundStyle.StrokeStyleStroke(
                    width: 0.0,
                    color: Color(uiColor: .clear)
                )
            default:
                preconditionFailure("Unknown stroke style type!")
        }
                
        // return the view
        return makeView(
            shape: shape,
            stroke: finalStoke
        )
    }
}

extension View {
    public func background(_ backgroundStyle: {{ argument.sharedFrameworkName }}.BackgroundStyle) -> some View {
        ModifiedContent(
            content: self,
            modifier: BackgroundStyleModifier(backgroundStyle: backgroundStyle)
        )
    }
}

// MARK: - Private methods

private extension {{ argument.sharedFrameworkName }}.BackgroundStyle {

    func makeView(
        shape: AnyShape,
        stroke: {{ argument.sharedFrameworkName }}.BackgroundStyle.StrokeStyleStroke
    ) -> AnyView {
        switch fillStyle {
            case let solid as {{ argument.sharedFrameworkName }}.BackgroundStyle.FillStyleSolid:
                return AnyView(
                    shape
                        .style(
                            fill: Color(solid.color.uiColor),
                            stroke: Color(stroke.color.uiColor),
                            lineWidth: CGFloat(stroke.width)
                        )
                )
            case let gradient as {{ argument.sharedFrameworkName }}.BackgroundStyle.FillStyleGradient:
                return makeGradientView(shape: shape, stroke: stroke, gradient: gradient)
            default:
                preconditionFailure("Unknown fill style type!")
        }
    }
    
    func makeGradientView(
        shape: AnyShape,
        stroke: {{ argument.sharedFrameworkName }}.BackgroundStyle.StrokeStyleStroke,
        gradient: {{ argument.sharedFrameworkName }}.BackgroundStyle.FillStyleGradient
    ) -> AnyView {
        switch gradient.gradientStyle {
            case let linear as GradientStyle.Linear:
                let gradient = self.makeGradientColor(colorPoints: linear.colorPoints)
                let linearPoints = makeLinearPoints(orientation: linear.orientation)
                return AnyView(
                    shape
                        .style(
                            fill: LinearGradient(
                                gradient: gradient,
                                startPoint: linearPoints.startPoint,
                                endPoint: linearPoints.endPoint
                            ),
                            stroke: Color(stroke.color.uiColor),
                            lineWidth: CGFloat(stroke.width)
                        )
                )
            case let radial as GradientStyle.Radial:
                let gradient = self.makeGradientColor(colorPoints: radial.colorPoints)
                return AnyView(
                    shape
                        .style(
                            fill:
                                RadialGradient(
                                    gradient: gradient,
                                    center: .center,
                                    startRadius: 0,
                                    endRadius: CGFloat(radial.radius)
                                ),
                            stroke: Color(stroke.color.uiColor),
                            lineWidth: CGFloat(stroke.width)
                        )
                )
            case let angular as GradientStyle.Angular:
                let gradient = self.makeGradientColor(colorPoints: angular.colorPoints)
                return AnyView(
                    shape
                        .style(
                            fill:
                                AngularGradient(
                                    gradient: gradient,
                                    center: .center
                                ),
                            stroke: Color(stroke.color.uiColor),
                            lineWidth: CGFloat(stroke.width)
                        )
                )
            default:
                preconditionFailure("Unknown gradient style type!")
        }
    }
    
    func makeGradientColor(colorPoints: [GradientStyle.ColorPoint]) -> Gradient {
        Gradient(stops: colorPoints
                    .map {
                        Gradient.Stop(
                            color: Color($0.color.uiColor),
                            location: CGFloat($0.offset)
                        )
                    }
        )
    }
    
    func makeLinearPoints(orientation: GradientStyle.LinearOrientation) -> (startPoint: UnitPoint, endPoint: UnitPoint) {
        switch orientation {
            case .leftRight:
                return (startPoint: .leading, endPoint: .trailing)
            case .rightLeft:
                return (startPoint: .trailing, endPoint: .leading)
            case .topBottom:
                return (startPoint: .top, endPoint: .bottom)
            case .topLeftBottomRight:
                return (startPoint: .topLeading, endPoint: .bottomTrailing)
            case .topRightBottomLeft:
                return (startPoint: .topTrailing, endPoint: .bottomLeading)
            case .bottomTop:
                return (startPoint: .bottom, endPoint: .top)
            case .bottomLeftTopRight:
                return (startPoint: .bottomLeading, endPoint: .bottomTrailing)
            case .bottomRightTopLeft:
                return (startPoint: .bottomTrailing, endPoint: .bottomLeading)
            default:
                preconditionFailure("Unknown linear orientation type!")
        }
    }
    
    // Due to is not possible to create the AnyShapeStyle as we did with AnyShape
    // and the fact that it was only introduced from iOS 15, we need to fall back to multiple
    // switches in order to create the anyView!
    // https://developer.apple.com/documentation/swiftui/anyshapestyle
    // https://developer.apple.com/documentation/swiftui/shapestyle
    /*
    func shapeStyle(buttonStateStyle: ButtonStateStyle) -> some ShapeStyle {
        switch buttonStateStyle.backgroundStyle.fillStyle {
            case let solid as {{ argument.sharedFrameworkName }}.BackgroundStyle.FillStyleSolid:
                return Color(solid.color.uiColor)
            case let gradient as {{ argument.sharedFrameworkName }}.BackgroundStyle.FillStyleGradient:
                //preconditionFailure("To do!")
                return LinearGradient(
                    gradient: Gradient(colors: [.blue, .black]),
                    startPoint: .top,
                    endPoint: .bottom
                )
            default:
                preconditionFailure("Unknown fill style type!")
        }
    }
    */
}

fileprivate struct BackgroundStyleModifier: ViewModifier {
    let backgroundStyle: {{ argument.sharedFrameworkName }}.BackgroundStyle
    
    func body(content: Content) -> some View {
        content
            .background(backgroundStyle.toView())
    }
}

// MARK: - RoundedShape

fileprivate struct RoundedShape: Shape {
    var cornerRadii: CGSize = .zero
    var corners: UIRectCorner = .allCorners
    
    func path(in rect: CGRect) -> Path {
        let path = UIBezierPath(
            roundedRect: rect,
            byRoundingCorners: corners,
            cornerRadii: cornerRadii
        )
        return Path(path.cgPath)
    }
}
{% endif %}
