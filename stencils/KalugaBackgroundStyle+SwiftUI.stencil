// swiftlint:disable file_length
{% if argument.includeResources %}
import SwiftUI
import {{ argument.sharedFrameworkName }}

// MARK: - BackgroundStyle

struct KalugaBackgroundView : View {
    let style: KalugaBackgroundStyle
    private let stroke: KalugaBackgroundStyle.StrokeStyleStroke
    init(style: KalugaBackgroundStyle) {
        self.style = style
        self.stroke = KalugaBackgroundView.strokeStyle(style: style)
    }
    var body: some View {
        switch style.fillStyle {
        case let solid as KalugaBackgroundStyle.FillStyleSolid:
            ShapeView(
                shape: style.shape.toShape(),
                fill: Color(solid.color.uiColor),
                stroke: Color(stroke.color.uiColor),
                lineWidth: CGFloat(stroke.width)
            )
        case let gradient as KalugaBackgroundStyle.FillStyleGradient:
            makeGradientView(gradient: gradient)
        default:
            preconditionFailure("Unknown fill style type!")
        }
    }
    @ViewBuilder
    func makeGradientView(
        gradient: KalugaBackgroundStyle.FillStyleGradient
    ) -> some View {
        switch gradient.gradientStyle {
        case let linear as GradientStyle.Linear:
            let gradient = self.makeGradientColor(colorPoints: linear.colorPoints)
            let linearPoints = makeLinearPoints(orientation: linear.orientation)
            ShapeView(
                shape: style.shape.toShape(),
                fill: LinearGradient(
                    gradient: gradient,
                    startPoint: linearPoints.startPoint,
                    endPoint: linearPoints.endPoint
                ),
                stroke: Color(stroke.color.uiColor),
                lineWidth: CGFloat(stroke.width)
            )
        case let radial as GradientStyle.Radial:
            let gradient = self.makeGradientColor(colorPoints: radial.colorPoints)
            ShapeView(
                shape: style.shape.toShape(),
                fill:
                    RadialGradient(
                        gradient: gradient,
                        center: .center,
                        startRadius: 0,
                        endRadius: CGFloat(radial.radius)
                    ),
                stroke: Color(stroke.color.uiColor),
                lineWidth: CGFloat(stroke.width)
            )
        case let angular as GradientStyle.Angular:
            let gradient = self.makeGradientColor(colorPoints: angular.colorPoints)
            ShapeView(
                shape: style.shape.toShape(),
                fill:
                    AngularGradient(
                        gradient: gradient,
                        center: .center
                    ),
                stroke: Color(stroke.color.uiColor),
                lineWidth: CGFloat(stroke.width)
            )
        default:
            preconditionFailure("Unknown gradient style type!")
        }
    }
    func makeGradientColor(colorPoints: [GradientStyle.ColorPoint]) -> Gradient {
        Gradient(stops: colorPoints
            .map {
                Gradient.Stop(
                    color: Color($0.color.uiColor),
                    location: CGFloat($0.offset)
                )
            }
        )
    }
    func makeLinearPoints(orientation: GradientStyle.LinearOrientation) -> (startPoint: UnitPoint, endPoint: UnitPoint) {
        switch orientation {
        case .leftRight:
            return (startPoint: .leading, endPoint: .trailing)
        case .rightLeft:
            return (startPoint: .trailing, endPoint: .leading)
        case .topBottom:
            return (startPoint: .top, endPoint: .bottom)
        case .topLeftBottomRight:
            return (startPoint: .topLeading, endPoint: .bottomTrailing)
        case .topRightBottomLeft:
            return (startPoint: .topTrailing, endPoint: .bottomLeading)
        case .bottomTop:
            return (startPoint: .bottom, endPoint: .top)
        case .bottomLeftTopRight:
            return (startPoint: .bottomLeading, endPoint: .bottomTrailing)
        case .bottomRightTopLeft:
            return (startPoint: .bottomTrailing, endPoint: .bottomLeading)
        default:
            preconditionFailure("Unknown linear orientation type!")
        }
    }
    private static func strokeStyle(style: KalugaBackgroundStyle) -> KalugaBackgroundStyle.StrokeStyleStroke {
        switch style.strokeStyle {
        case let stroke as KalugaBackgroundStyle.StrokeStyleStroke:
            return stroke
        case is KalugaBackgroundStyle.StrokeStyleNone:
            return KalugaBackgroundStyle.StrokeStyleStroke(
                width: 0.0,
                color: KalugaColor.RGBColor(uiColor: .clear)
            )
        default:
            preconditionFailure("Unknown stroke style type!")
        }
    }
}

// MARK: - Modifiers

extension View {
    public func background(
        _ backgroundStyle: KalugaBackgroundStyle,
        addContentShape: Bool = true,
        clipShape: Bool = true,
        edgesIgnoringSafeArea: Edge.Set? = nil
    ) -> some View {
        ModifiedContent(
            content: self,
            modifier: BackgroundStyleModifier(
                backgroundStyle: backgroundStyle,
                addContentShape: addContentShape,
                clipShape: clipShape,
                edgesIgnoringSafeArea: edgesIgnoringSafeArea ?? []
            )
        )
    }
}

struct BackgroundStyleModifier: ViewModifier {
    let backgroundStyle: KalugaBackgroundStyle
    let addContentShape: Bool
    let clipShape: Bool
    let edgesIgnoringSafeArea: Edge.Set
    func body(content: Content) -> some View {
        content
            .background(
                backgroundStyle.toView().ignoresSafeArea(edges: edgesIgnoringSafeArea)
            )
            .modifyIf(addContentShape, modifier: BackgroundShapeContentModifier(shape: backgroundStyle.shape))
            .modifyIf(clipShape, modifier: BackgroundShapeClipModifier(shape: backgroundStyle.shape))
    }
}
{% endif %}
