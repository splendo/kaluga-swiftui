import SwiftUI
import Combine
import {{ argument.sharedFrameworkName }}

typealias ObjectUninitializedObservable<T: KotlinObject> = MappedUninitializedObservable<T, T, EmptyOptionalMapper<T>>
typealias StringUninitializedObservable = MappedUninitializedObservable<NSString, String, StringOptionalMapper>
typealias BoolUninitializedObservable = MappedUninitializedObservable<KotlinBoolean, Bool, BoolOptionalMapper>
typealias IntUninitializedObservable = MappedUninitializedObservable<KotlinInt, Int, IntOptionalMapper>
typealias FloatUninitializedObservable = MappedUninitializedObservable<KotlinFloat, Float, FloatOptionalMapper>
typealias DoubleUninitializedObservable = MappedUninitializedObservable<KotlinDouble, Double, DoubleOptionalMapper>
{% if argument.includeResources %}
typealias UIColorUninitializedObservable = MappedUninitializedObservable<{{ argument.sharedFrameworkName }}.KalugaColor, UIColor, UIColorOptionalMapper>
typealias ColorUninitializedObservable = MappedUninitializedObservable<{{ argument.sharedFrameworkName }}.KalugaColor, SwiftUI.Color, ColorOptionalMapper>
typealias UIImageUninitializedObservable = MappedUninitializedObservable<UIImage, UIImage, EmptyOptionalMapper<UIImage>>
typealias ImageUninitializedObservable = MappedUninitializedObservable<UIImage, Image, ImageOptionalMapper>
typealias TintedImageUninitializedObservable = MappedUninitializedObservable<TintedImage, TintedImage, EmptyOptionalMapper<TintedImage>>
typealias BackgroundStyleUninitializedObservable = MappedUninitializedObservable<KalugaBackgroundStyle, KalugaBackgroundStyle, EmptyOptionalMapper<KalugaBackgroundStyle>>
typealias LabelUninitializedObservable = MappedUninitializedObservable<KalugaLabel, KalugaLabel, EmptyOptionalMapper<KalugaLabel>>
typealias PlainLabelUninitializedObservable = MappedUninitializedObservable<KalugaLabel.Plain, KalugaLabel.Plain, EmptyOptionalMapper<KalugaLabel.Plain>>
typealias StyledLabelUninitializedObservable = MappedUninitializedObservable<KalugaLabel.Styled, KalugaLabel.Styled, EmptyOptionalMapper<KalugaLabel.Styled>>
typealias ButtonUninitializedObservable = MappedUninitializedObservable<KalugaButton, KalugaButton, EmptyOptionalMapper<KalugaButton>>
typealias PlainButtonUninitializedObservable = MappedUninitializedObservable<KalugaButton.Plain, KalugaButton.Plain, EmptyOptionalMapper<KalugaButton.Plain>>
typealias StyledButtonUninitializedObservable = MappedUninitializedObservable<KalugaButton.Styled, KalugaButton.Styled, EmptyOptionalMapper<KalugaButton.Styled>>
typealias ButtonWithTextUninitializedObservable = MappedUninitializedObservable<KalugaButton.WithText, KalugaButton.WithText, EmptyOptionalMapper<KalugaButton.WithText>>
typealias ButtonWithoutTextUninitializedObservable = MappedUninitializedObservable<KalugaButton.WithoutText, KalugaButton.WithoutText, EmptyOptionalMapper<KalugaButton.WithoutText>>
typealias ButtonStyleUninitializedObservable = MappedUninitializedObservable<KalugaButtonStyle, KalugaButtonStyle, EmptyOptionalMapper<KalugaButtonStyle>>
typealias ButtonStyleWithTextUninitializedObservable = MappedUninitializedObservable<KalugaButtonStyleWithText, KalugaButtonStyleWithText, EmptyOptionalMapper<KalugaButtonStyleWithText>>
typealias ButtonStyleTextOnlyUninitializedObservable = MappedUninitializedObservable<KalugaButtonStyleTextOnly, KalugaButtonStyleTextOnly, EmptyOptionalMapper<KalugaButtonStyleTextOnly>>
typealias ButtonStyleWithImageAndTextUninitializedObservable = MappedUninitializedObservable<KalugaButtonStyleWithImageAndText, KalugaButtonStyleWithImageAndText, EmptyOptionalMapper<KalugaButtonStyleWithImageAndText>>
typealias ButtonStyleWithImageUninitializedObservable = MappedUninitializedObservable<KalugaButtonStyleWithImage, KalugaButtonStyleWithImage, EmptyOptionalMapper<KalugaButtonStyleWithImage>>
typealias ButtonStyleWithoutTextUninitializedObservable = MappedUninitializedObservable<KalugaButtonStyleWithoutText, KalugaButtonStyleWithoutText, EmptyOptionalMapper<KalugaButtonStyleWithoutText>>
typealias ButtonStyleImageOnlyUninitializedObservable = MappedUninitializedObservable<KalugaButtonStyleImageOnly, KalugaButtonStyleImageOnly, EmptyOptionalMapper<KalugaButtonStyleImageOnly>>
typealias ButtonStyleWithoutContentUninitializedObservable = MappedUninitializedObservable<KalugaButtonStyleWithoutContent, KalugaButtonStyleWithoutContent, EmptyOptionalMapper<KalugaButtonStyleWithoutContent>>
{% endif %}
typealias DateUninitializedObservable = MappedUninitializedObservable<KalugaDate, Foundation.Date, DateOptionalMapper>

class UninitializedObservable<Input: KotlinObject, Output: Any>: ObservableObject {

    @Published private(set) var value: Output?

    private var input: Input?
    private let disposeBag = DisposeBag()

    init(
        _ observable: BaseUninitializedObservable<Input>,
        animated: Bool = false,
        mapper: @escaping (Input?) -> Output?
    ) {
        assert(Thread.isMainThread, "Constructor must be called on the main thread, but called on \(Thread.current)")
        input = observable.currentOrNull
        if input != nil {
            value = mapper(input!)
        }
        observable
            .observe { [weak self] newValue in
                guard let self = self else {
                    return
                }
                defer {
                    self.input = newValue
                }
                let mapped = mapper(newValue)
                if animated {
                    withAnimation {
                        self.value = mapped
                    }
                } else {
                    self.value = mapped
                }
            }
            .addTo(disposeBag: disposeBag)
    }

    deinit {
        let disposeBag = self.disposeBag
        DispatchQueue.main.async {
            disposeBag.dispose()
        }
    }
}

class MappedUninitializedObservable<
    Input: KotlinObject,
    Output: Any,
    Mapper: PlatformOptionalValueToMapper
>: UninitializedObservable<Input, Output> where Mapper.Input == Input, Mapper.Output == Output {
    init(_ observable: BaseUninitializedObservable<Input>, animated: Bool = false) {
        super.init(observable, animated: animated, mapper: Mapper.to)
    }
}
