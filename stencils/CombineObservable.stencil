// swiftlint:disable all

import SwiftUI
import Combine
import {{ argument.sharedFrameworkName }}

class CombineObservable<Output: Equatable, Input: AnyObject & Equatable>: ObservableObject {

    @Published private(set) var value: Output
    private var input: Input?
    private let disposeBag = DisposeBag()

    init(
        _ architectureObservable: ArchitectureObservable<Input>,
        defaultValue: Output,
        mapper: @escaping (Input) -> Output
    ) {
        input = architectureObservable.currentOrNull
        if input != nil {
            value = mapper(input!)
        } else {
            value = defaultValue
        }
        architectureObservable
            .observe { [weak self] newValue in
                guard let self = self else {
                    return
                }
                defer {
                    self.input = newValue
                }
                guard newValue != nil, self.input != newValue else {
                    return
                }
                self.value = mapper(newValue!)
            }
            .addTo(disposeBag: disposeBag)
    }
    deinit {
        disposeBag.dispose()
    }
}

class SimpleCombineObservable<T: AnyObject & Equatable>: CombineObservable<T, T> {
    init(
        _ architectureObservable: ArchitectureObservable<T>,
        defaultValue: T
    ) {
        super.init(
            architectureObservable,
            defaultValue: defaultValue) { $0 }
    }
}

class StringCombineObservable: CombineObservable<String, NSString> {
    init(
        _ architectureObservable: ArchitectureObservable<NSString>,
        defaultValue: String = ""
    ) {
        super.init(
            architectureObservable,
            defaultValue: defaultValue,
            mapper: String.init
        )
    }
}

class IntCombineObservable: CombineObservable<Int, KotlinInt> {
    init(
        _ architectureObservable: ArchitectureObservable<KotlinInt>,
        defaultValue: Int = .zero
    ) {
        super.init(
            architectureObservable,
            defaultValue: defaultValue) { $0.intValue }
    }
}

class FloatCombineObservable: CombineObservable<Float, KotlinFloat> {
    init(
        _ architectureObservable: ArchitectureObservable<KotlinFloat>,
        defaultValue: Float = .zero
    ) {
        super.init(
            architectureObservable,
            defaultValue: defaultValue) { $0.floatValue }
    }
}

class DoubleCombineObservable: CombineObservable<Double, KotlinDouble> {
    init(
        _ architectureObservable: ArchitectureObservable<KotlinDouble>,
        defaultValue: Double = .zero
    ) {
        super.init(
            architectureObservable,
            defaultValue: defaultValue) { $0.doubleValue }
    }
}

class BoolCombineObservable: CombineObservable<Bool, KotlinBoolean> {
    init(
        _ architectureObservable: ArchitectureObservable<KotlinBoolean>,
        defaultValue: Bool = false
    ) {
        super.init(
            architectureObservable,
            defaultValue: defaultValue) { $0.boolValue }
    }
}

class ColorCombineObservable: CombineObservable<Color, ResourcesColor> {
    init(
        _ architectureObservable: ArchitectureObservable<ResourcesColor>,
        defaultValue: Color = .clear
    ) {
        super.init(
            architectureObservable,
            defaultValue: defaultValue) { Color($0.uiColor) }
    }
}
