// swiftlint:disable force_cast
import UIKit
import SwiftUI
import Foundation
{% if argument.includeResources %}
import {{ argument.sharedFrameworkName }}
{% endif %}

extension Array: HasDefaultValue {
    static func `default`() -> Self { [] }
}

extension String: HasDefaultValue {
    static func `default`() -> String { String() }
}

extension Bool: HasDefaultValue {
    static func `default`() -> Bool { false }
}

extension Int: HasDefaultValue {
    static func `default`() -> Int { .zero }
}

extension Float: HasDefaultValue {
    static func `default`() -> Float { .zero }
}

extension Double: HasDefaultValue {
    static func `default`() -> Double { .zero }
}

extension UIColor: HasDefaultValue {
    static func `default`() -> Self { UIColor.clear as! Self }
}

extension SwiftUI.Color: HasDefaultValue {
    static func `default`() -> Self { SwiftUI.Color.clear }
}

extension UIImage: HasDefaultValue {
    static func `default`() -> Self {
        UIGraphicsBeginImageContext(CGSize(width: 1, height: 1))
        let image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        return image as! Self
    }
}

extension Image: HasDefaultValue {
    static func `default`() -> Self {
        return Image(uiImage: UIImage.default())
    }
}

{% if argument.includeResources %}

extension KalugaColor: HasDefaultValue {
    static func `default`() -> Self {
        return KalugaColor(uiColor: UIColor.clear) as! Self
    }
}

extension KalugaBackgroundStyle: HasDefaultValue {
    static func `default`() -> Self {
        return KalugaBackgroundStyle(
            fillStyle: FillStyleSolid(color: KalugaColor.default()),
            strokeStyle: StrokeStyleNone.shared,
            shape: ShapeRectangle(cornerRadius: 0.0, roundedCorners: [])
        ) as! Self
    }
}

extension TextStyle: HasDefaultValue {
    static func `default`() -> Self {
        return TextStyle(
            font: UIFont.systemFont(ofSize: UIFont.systemFontSize),
            color: KalugaColor(uiColor: UIColor.darkText),
            size: Float(UIFont.systemFontSize),
            alignment: KalugaTextAlignment.start
        ) as! Self
    }
}

extension KalugaLabel : HasDefaultValue {
    static func `default`() -> Self {
        return KalugaLabel.Plain(
            text: "",
            style: TextStyle.default()
        ) as! Self
    }
}

extension ButtonStateStyle: HasDefaultValue {
    static func `default`() -> Self {
        return ButtonStateStyle(
            textColor: KalugaColor(uiColor: UIColor.darkText),
            backgroundStyle:KalugaBackgroundStyle.default()
        ) as! Self
    }
}

extension KalugaButtonStyle: HasDefaultValue {
    static func `default`() -> Self {
        return KalugaButtonStyle(
            font: UIFont.systemFont(ofSize: UIFont.systemFontSize),
            textSize: Float(UIFont.systemFontSize),
            textAlignment: .center,
            defaultStyle: ButtonStateStyle.default(),
            pressedStyle: ButtonStateStyle.default(),
            disabledStyle: ButtonStateStyle.default()
        ) as! Self
    }
}

extension KalugaButton : HasDefaultValue {
    static func `default`() -> Self {
        return KalugaButton.Plain(
            text: "",
            style: KalugaButtonStyle.default(),
            isEnabled: true
        ) {} as! Self
    }
}

{% endif %}

extension Date: HasDefaultValue {
    static func `default`() -> Date { Date() }
}

extension Optional: HasDefaultValue {
    static func `default`() -> Wrapped? { nil }
}
