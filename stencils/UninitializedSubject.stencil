import SwiftUI
import Combine
import {{ argument.sharedFrameworkName }}

typealias StringUninitializedSubject = MappedUninitializedSubject<NSString, String, StringOptionalMapper>
typealias BoolUninitializedSubject = MappedUninitializedSubject<KotlinBoolean, Bool, BoolOptionalMapper>
typealias IntUninitializedSubject = MappedUninitializedSubject<KotlinInt, Int, IntOptionalMapper>
typealias FloatUninitializedSubject = MappedUninitializedSubject<KotlinFloat, Float, FloatOptionalMapper>
typealias DoubleUninitializedSubject = MappedUninitializedSubject<KotlinDouble, Double, DoubleOptionalMapper>
typealias DateUninitializedSubject = MappedUninitializedSubject<KalugaDate, Foundation.Date, DateOptionalMapper>

class UninitializedSubject<Input: KotlinObject, Output: Any>: ObservableObject {

    @Published var value: Output?

    private var input: Input?
    private let disposeBag = DisposeBag(allowFreezing: false)
    private let cancellable: AnyCancellable

    init(_ subject: BaseUninitializedSubject<Input>,
         animated: Bool = false,
         toMapper: @escaping (Input?) -> Output?,
         fromMapper: @escaping (Output?) -> Input?
    ) {
        assert(Thread.isMainThread, "Constructor must be called on the main thread, but called on \(Thread.current)")
        input = subject.currentOrNull
        if input != nil {
            value = toMapper(input!)
        }
        cancellable = _value.projectedValue.sink { newValue in
            if let current = subject.currentOrNull, newValue == toMapper(current) {
                return
            }
            if let newValue = newValue {
                subject.post(newValue: fromMapper(newValue))
            } else {
                subject.post(newValue: nil)
            }
        }
        subject
            .observe { [weak self] newValue in
                guard let self = self else {
                    return
                }
                defer {
                    self.input = newValue
                }
                let mapped: Output?
                if let newValue = newValue {
                    mapped = toMapper(newValue)
                } else {
                    mapped = nil
                }
                if animated {
                    withAnimation {
                        self.value = mapped
                    }
                } else {
                    self.value = mapped
                }
            }
            .addTo(disposeBag: disposeBag)
    }

    deinit {
        let disposeBag = self.disposeBag
        DispatchQueue.main.async {
            disposeBag.dispose()
        }
    }
}

class MappedUninitializedSubject<
    Input: KotlinObject,
    Output: Any,
    Mapper: PlatformOptionalValueMapper
>: UninitializedSubject<Input, Output> where Mapper.Input == Input, Mapper.Output == Output {
    init(_ subject: BaseUninitializedSubject<Input>, animated: Bool = false) {
        super.init(
            subject,
            animated: animated,
            toMapper: Mapper.to,
            fromMapper: Mapper.from
        )
    }
}
