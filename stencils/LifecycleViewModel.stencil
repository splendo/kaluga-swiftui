import SwiftUI
import {{ argument.sharedFrameworkName }}

class LifecycleViewModel<VM: BaseViewModel> {

    let viewModel: VM
    let containerView: ContainerView?

    init(_ viewModel: VM, containerView: ContainerView? = nil) {
        assert(Thread.isMainThread, "Constructor must be called on the main thread, but called on \(Thread.current)")
        self.viewModel = viewModel
        self.containerView = containerView
    }

    deinit {
        if Thread.current.isMainThread {
            viewModel.clear()
        } else {
            DispatchQueue.main.sync {
                viewModel.clear()
            }
        }
    }

    func lifecycleView<V: View>(view: (VM) -> V) -> some View {
        ZStack {
            containerView.frame(width: 0, height: 0)
            view(viewModel)
                .onAppear(perform: viewModel.didResume)
                .onDisappear(perform: viewModel.didPause)
        }
    }
}
