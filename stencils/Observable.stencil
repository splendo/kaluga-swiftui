import SwiftUI
import Combine
import {{ argument.sharedFrameworkName }}

typealias KotlinObject = AnyObject

typealias ObjectObservable<T: KotlinObject & HasDefaultValue> = MappedWithDefaultObservable<T, T, EmptyMapper<T>>
typealias StringObservable = MappedWithDefaultObservable<NSString, String, StringMapper>
typealias BoolObservable = MappedWithDefaultObservable<KotlinBoolean, Bool, BoolMapper>
typealias IntObservable = MappedWithDefaultObservable<KotlinInt, Int, IntMapper>
typealias FloatObservable = MappedWithDefaultObservable<KotlinFloat, Float, FloatMapper>
typealias DoubleObservable = MappedWithDefaultObservable<KotlinDouble, Double, DoubleMapper>
{% if argument.includeResources %}
typealias UIColorObservable = MappedWithDefaultObservable<KalugaColor, UIColor, UIColorMapper>
typealias ColorObservable = MappedWithDefaultObservable<KalugaColor, Color, ColorMapper>
typealias UIImageObservable = MappedWithDefaultObservable<UIImage, UIImage, EmptyMapper<UIImage>>
typealias ImageObservable = MappedWithDefaultObservable<UIImage, Image, ImageMapper>
typealias TintedImageObservable = MappedWithDefaultObservable<TintedImage, TintedImage, TintedImageMapper>
typealias BackgroundStyleObservable = MappedWithDefaultObservable<KalugaBackgroundStyle, KalugaBackgroundStyle, EmptyMapper<KalugaBackgroundStyle>>
class LabelObservable : MappedObservable<KalugaLabel, KalugaLabel, EmptyMapper<KalugaLabel>> {
    override init(
        _ observable: BaseInitializedObservable<KalugaLabel>,
        defaultValue: KalugaLabel = KalugaLabel.Plain.default(),
        animated: Bool = false
    ) {
        super.init(observable, defaultValue: defaultValue, animated: animated)
    }
}
typealias PlainLabelObservable = MappedWithDefaultObservable<KalugaLabel.Plain, KalugaLabel.Plain, EmptyMapper<KalugaLabel.Plain>>
typealias StyledLabelObservable = MappedWithDefaultObservable<KalugaLabel.Styled, KalugaLabel.Styled, EmptyMapper<KalugaLabel.Styled>>
class ButtonObservable : MappedObservable<KalugaButton, KalugaButton, EmptyMapper<KalugaButton>> {
    override init(
        _ observable: BaseInitializedObservable<KalugaButton>,
        defaultValue: KalugaButton = KalugaButton.Plain.default(),
        animated: Bool = false
    ) {
        super.init(observable, defaultValue: defaultValue, animated: animated)
    }
}
typealias PlainButtonObservable = MappedWithDefaultObservable<KalugaButton.Plain, KalugaButton.Plain, EmptyMapper<KalugaButton.Plain>>
typealias StyledButtonObservable = MappedWithDefaultObservable<KalugaButton.Styled, KalugaButton.Styled, EmptyMapper<KalugaButton.Styled>>
class ButtonWithTextObservable : MappedObservable<KalugaButton.WithText, KalugaButton.WithText, EmptyMapper<KalugaButton.WithText>> {
    override init(
        _ observable: BaseInitializedObservable<KalugaButton.WithText>,
        defaultValue: KalugaButton.WithText = KalugaButton.Plain.default(),
        animated: Bool = false
    ) {
        super.init(observable, defaultValue: defaultValue, animated: animated)
    }
}
typealias ButtonWithoutTextObservable = MappedWithDefaultObservable<KalugaButton.WithoutText, KalugaButton.WithoutText, EmptyMapper<KalugaButton.WithoutText>>
class ButtonStyleObservable : MappedObservable<KalugaButtonStyle, KalugaButtonStyle, EmptyMapper<KalugaButtonStyle>> {
    override init(
        _ observable: BaseInitializedObservable<KalugaButtonStyle>,
        defaultValue: KalugaButtonStyle = KalugaButtonStyleWithoutContent.default(),
        animated: Bool = false
    ) {
        super.init(observable, defaultValue: defaultValue, animated: animated)
    }
}
class ButtonStyleWithTextObservable : MappedObservable<KalugaButtonStyleWithText, KalugaButtonStyleWithText, EmptyMapper<KalugaButtonStyleWithText>> {
    override init(
        _ observable: BaseInitializedObservable<KalugaButtonStyleWithText>,
        defaultValue: KalugaButtonStyleWithText = KalugaButtonStyleTextOnly.default(),
        animated: Bool = false
    ) {
        super.init(observable, defaultValue: defaultValue, animated: animated)
    }
}
typealias ButtonStyleTextOnlyObservable = MappedWithDefaultObservable<KalugaButtonStyleTextOnly, KalugaButtonStyleTextOnly, EmptyMapper<KalugaButtonStyleTextOnly>>
typealias ButtonStyleWithImageAndTextObservable = MappedWithDefaultObservable<KalugaButtonStyleWithImageAndText, KalugaButtonStyleWithImageAndText, EmptyMapper<KalugaButtonStyleWithImageAndText>>
class ButtonStyleWithImageObservable : MappedObservable<KalugaButtonStyleWithImage, KalugaButtonStyleWithImage, EmptyMapper<KalugaButtonStyleWithImage>> {
    override init(
        _ observable: BaseInitializedObservable<KalugaButtonStyleWithImage>,
        defaultValue: KalugaButtonStyleWithImage = KalugaButtonStyleImageOnly.default(),
        animated: Bool = false
    ) {
        super.init(observable, defaultValue: defaultValue, animated: animated)
    }
}
class ButtonStyleWithoutTextObservable : MappedObservable<KalugaButtonStyleWithoutText, KalugaButtonStyleWithoutText, EmptyMapper<KalugaButtonStyleWithoutText>> {
    override init(
        _ observable: BaseInitializedObservable<KalugaButtonStyleWithoutText>,
        defaultValue: KalugaButtonStyleWithoutText = KalugaButtonStyleWithoutContent.default(),
        animated: Bool = false
    ) {
        super.init(observable, defaultValue: defaultValue, animated: animated)
    }
}
typealias ButtonStyleImageOnlyObservable = MappedWithDefaultObservable<KalugaButtonStyleImageOnly, KalugaButtonStyleImageOnly, EmptyMapper<KalugaButtonStyleImageOnly>>
typealias ButtonStyleWithoutContentObservable = MappedWithDefaultObservable<KalugaButtonStyleWithoutContent, KalugaButtonStyleWithoutContent, EmptyMapper<KalugaButtonStyleWithoutContent>>
{% endif %}
typealias DateObservable = MappedWithDefaultObservable<KalugaDate, Foundation.Date, DateMapper>
typealias ObjectSimpleObservable<T: KotlinObject> = MappedObservable<T, T, EmptyMapper<T>>

class Observable<Input: KotlinObject, Output: Any>: ObservableObject {

    @Published private(set) var value: Output

    private var input: Input?
    private let disposeBag = DisposeBag()

    init(
        _ observable: BaseInitializedObservable<Input>,
        defaultValue: Output,
        animated: Bool = false,
        mapper: @escaping (Input) -> Output
    ) {
        assert(Thread.isMainThread, "Constructor must be called on the main thread, but called on \(Thread.current)")
        input = observable.currentOrNull
        if input != nil {
            value = mapper(input!)
        } else {
            value = defaultValue
        }
        observable
            .observe { [weak self] newValue in
                guard let self = self else {
                    return
                }
                defer {
                    self.input = newValue
                }
                guard newValue != nil else {
                    if self.input != nil {
                        self.value = defaultValue
                    }
                    return
                }
                let mapped = mapper(newValue!)
                if animated {
                    withAnimation {
                        self.value = mapped
                    }
                } else {
                    self.value = mapped
                }
            }
            .addTo(disposeBag: disposeBag)
    }

    deinit {
        let disposeBag = self.disposeBag
        DispatchQueue.main.async {
            disposeBag.dispose()
        }
    }
}

class MappedObservable<
    Input: KotlinObject,
    Output: Any,
    Mapper: PlatformValueToMapper
>: Observable<Input, Output> where Mapper.Input == Input, Mapper.Output == Output {
    init(_ observable: BaseInitializedObservable<Input>, defaultValue: Output, animated: Bool = false) {
        super.init(observable, defaultValue: defaultValue, animated: animated, mapper: Mapper.to)
    }
}

class MappedWithDefaultObservable<
    Input: KotlinObject,
    Output: Any & HasDefaultValue,
    Mapper: PlatformValueToMapper
>: MappedObservable<Input, Output, Mapper> where Mapper.Input == Input, Mapper.Output == Output {
    override init(
        _ observable: BaseInitializedObservable<Input>,
        defaultValue: Output = .default(),
        animated: Bool = false
    ) {
        super.init(observable, defaultValue: defaultValue, animated: animated)
    }
}

extension Observable {
    func asBinding(setMethod: @escaping (Output) -> Void) -> Binding<Output> {
        return Binding(
            get: { [unowned self] in self.value },
            set: setMethod
        )
    }

    func asBinding<T>(mapper: @escaping (Output) -> T, setMethod: @escaping (T) -> Void) -> Binding<T> {
        return Binding(
            get: { [unowned self] in mapper(self.value) },
            set: setMethod
        )
    }
}
