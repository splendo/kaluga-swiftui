import SwiftUI
import Combine
import {{ argument.sharedFrameworkName }}

typealias KotlinObject = AnyObject

typealias ObjectObservable<T: KotlinObject & HasDefaultValue> = MappedWithDefaultObservable<T, T, EmptyMapper<T>>
typealias StringObservable = MappedWithDefaultObservable<NSString, String, StringMapper>
typealias BoolObservable = MappedWithDefaultObservable<KotlinBoolean, Bool, BoolMapper>
typealias IntObservable = MappedWithDefaultObservable<KotlinInt, Int, IntMapper>
typealias FloatObservable = MappedWithDefaultObservable<KotlinFloat, Float, FloatMapper>
typealias DoubleObservable = MappedWithDefaultObservable<KotlinDouble, Double, DoubleMapper>
{% if argument.includeResources %}
typealias UIColorObservable = MappedWithDefaultObservable<{{ argument.sharedFrameworkName }}.KalugaColor, UIColor, UIColorMapper>
typealias ColorObservable = MappedWithDefaultObservable<{{ argument.sharedFrameworkName }}.KalugaColor, SwiftUI.Color, ColorMapper>
typealias UIImageObservable = MappedWithDefaultObservable<UIImage, UIImage, EmptyMapper<UIImage>>
typealias ImageObservable = MappedWithDefaultObservable<UIImage, Image, ImageMapper>
{% endif %}
typealias DateObservable = MappedWithDefaultObservable<KalugaDate, Foundation.Date, DateMapper>
typealias ObjectSimpleObservable<T: KotlinObject> = MappedObservable<T, T, EmptyMapper<T>>

class Observable<Input: KotlinObject, Output: Any>: ObservableObject {

    @Published private(set) var value: Output

    private var input: Input?
    private let disposeBag = DisposeBag(allowFreezing: false)

    init(
        _ observable: BaseInitializedObservable<Input>,
        defaultValue: Output,
        animated: Bool = false,
        mapper: @escaping (Input) -> Output
    ) {
        assert(Thread.isMainThread, "Constructor must be called on the main thread, but called on \(Thread.current)")
        input = observable.currentOrNull
        if input != nil {
            value = mapper(input!)
        } else {
            value = defaultValue
        }
        observable
            .observe { [weak self] newValue in
                guard let self = self else {
                    return
                }
                defer {
                    self.input = newValue
                }
                guard newValue != nil else {
                    if self.input != nil {
                        self.value = defaultValue
                    }
                    return
                }
                let mapped = mapper(newValue!)
                if animated {
                    withAnimation {
                        self.value = mapped
                    }
                } else {
                    self.value = mapped
                }
            }
            .addTo(disposeBag: disposeBag)
    }

    deinit {
        let disposeBag = self.disposeBag
        DispatchQueue.main.async {
            disposeBag.dispose()
        }
    }
}

class MappedObservable<
    Input: KotlinObject,
    Output: Any,
    Mapper: PlatformValueToMapper
>: Observable<Input, Output> where Mapper.Input == Input, Mapper.Output == Output {
    init(_ observable: BaseInitializedObservable<Input>, defaultValue: Output, animated: Bool = false) {
        super.init(observable, defaultValue: defaultValue, animated: animated, mapper: Mapper.to)
    }
}

class MappedWithDefaultObservable<
    Input: KotlinObject,
    Output: Any & HasDefaultValue,
    Mapper: PlatformValueToMapper
>: MappedObservable<Input, Output, Mapper> where Mapper.Input == Input, Mapper.Output == Output {
    override init(
        _ observable: BaseInitializedObservable<Input>,
        defaultValue: Output = .default(),
        animated: Bool = false
    ) {
        super.init(observable, defaultValue: defaultValue, animated: animated)
    }
}
