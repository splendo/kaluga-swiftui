// swiftlint:disable file_length
import SwiftUI
{% if argument.includePartialSheet %}import PartialSheet{% endif %}

enum NavigationType {
    case fullscreen
    case hud(blurRadius: CGFloat = 3, opacity: Double = 0.5)
    case push
    case replace
    case sheet
    case cover
{% if argument.includePartialSheet %}
    case partialSheet(style: PSIphoneStyle)
{% endif %}
}

struct Navigation<RS: RoutingState, NavigationContent: View>: ViewModifier {

    @ObservedObject var state: RS

    private let type: NavigationType
    private let navigationContent: (RS) -> NavigationContent

    init(state: RS, type: NavigationType, @ViewBuilder navigationContent: @escaping (RS) -> NavigationContent) {
        self.state = state
        self.type = type
        self.navigationContent = navigationContent
    }

    @ViewBuilder
    func body(content: Content) -> some View {
        switch type {
        case .push:
            VStack {
                NavigationLink(
                    destination: LazyView(navigationContent(state)),
                    isActive: $state.isPresented
                ) {
                    EmptyView()
                }
                content
            }
        case let .hud(blurRadius, opacity):
             Group {
                 content
                     .blur(radius: state.isPresented ? blurRadius : 0)
                     .opacity(state.isPresented ? opacity : 1.0)
                     .disabled(state.isPresented)
                 if state.isPresented {
                     LazyView(navigationContent(state))
                 }
             }
        case .fullscreen:
            // Before iOS 15 the .fullScreenCover modifier can't be more than one per view
            // so we use the workaround found on this thread.
            // https://stackoverflow.com/a/64403206/2242854
            if #available(iOS 15, *) {
                content.fullScreenCover(isPresented: $state.isPresented) { LazyView(navigationContent(state)) }
            } else {
                Group {
                    EmptyView().modifier(FullScreenModifier(isPresented: $state.isPresented, builder: { LazyView(navigationContent(state)) }))
                    content
                }
            }
        case .sheet:
            // Before iOS 15 the .sheet modifier can't be more than one per view
            // so we use the workaround found on this thread.
            // https://stackoverflow.com/a/64403206/2242854
            if #available(iOS 15, *) {
                content.sheet(isPresented: $state.isPresented) { LazyView(navigationContent(state)) }
            } else {
                Group {
                    EmptyView().sheet(isPresented: $state.isPresented) { LazyView(navigationContent(state)) }
                    content
                }
            }
        case .replace:
            if state.isPresented {
                LazyView(navigationContent(state))
            } else {
                content
            }
        case .cover:
            Group {
                content
                if state.isPresented {
                    LazyView(navigationContent(state))
                }
            }
        {% if argument.includePartialSheet %}
        case .partialSheet(let style):
            content
                .partialSheet(isPresented: $state.isPresented, iPhoneStyle: style) {
                    LazyView(navigationContent(state))
                }
        {% endif %}
        }
    }
}

struct ItemNavigation<ID: Identifiable, RS : IdentifiableRoutingState<ID>, NavigationContent: View>: ViewModifier {

    @ObservedObject var state: RS

    private let id: ID.ID
    private let type: NavigationType
    private let navigationContent: (RS) -> NavigationContent
    private let didSelect: () -> Void

    init(
        state: RS,
        id: ID.ID,
        type: NavigationType,
        didSelect: @escaping () -> Void,
        @ViewBuilder navigationContent: @escaping (RS) -> NavigationContent
    ) {
        self.id = id
        self.state = state
        self.type = type
        self.navigationContent = navigationContent
        self.didSelect = didSelect
    }

    @ViewBuilder
    func body(content: Content) -> some View {
        let isActive = Binding {
            state.isPresented && state.id == self.id
        } set: { isActive in
            if isActive {
                self.didSelect()
            } else {
                state.close()
            }
        }
        switch type {
        case .push:
            VStack {
                NavigationLink(
                    destination: LazyView(navigationContent(state)),
                    isActive: isActive
                ) {
                    content
                }
            }
        case let .hud(blurRadius, opacity):
            Group {
                content
                    .blur(radius: isActive.wrappedValue ? blurRadius : 0)
                    .opacity(isActive.wrappedValue ? opacity : 1.0)
                    .disabled(isActive.wrappedValue)
                if isActive.wrappedValue {
                    LazyView(navigationContent(state))
                }
            }
        case .fullscreen:
            content.modifier(FullScreenModifier(isPresented: isActive, builder: { LazyView(navigationContent(state)) }))
        case .sheet:
            content.sheet(isPresented: isActive) { LazyView(navigationContent(state)) }
        case .replace:
            if isActive.wrappedValue {
                LazyView(navigationContent(state))
            } else {
                content
            }
        case .cover:
            Group {
                content
                if isActive.wrappedValue {
                    LazyView(navigationContent(state))
                }
            }
        {% if argument.includePartialSheet %}
        case .partialSheet(let style):
            content
                .partialSheet(isPresented: isActive, iPhoneStyle: style) {
                    LazyView(navigationContent(state))
                }
        {% endif %}
        }
    }
}

// Needed for simulating fullscreen in iOS 13
struct FullScreenModifier<V: View>: ViewModifier {
    let isPresented: Binding<Bool>
    let builder: () -> V

    @ViewBuilder
    func body(content: Content) -> some View {
        if #available(iOS 14.0, *) {
            content.fullScreenCover(isPresented: isPresented, content: builder)
        } else {
            content.sheet(isPresented: isPresented, content: builder)
        }
    }
}

extension View {
    func navigation<RS : RoutingState, NavigationContent: View>(
        state: RS,
        type: NavigationType,
        @ViewBuilder content: @escaping (RS) -> NavigationContent
    ) -> some View {
        ModifiedContent(
            content: self,
            modifier: Navigation(
                state: state,
                type: type,
                navigationContent: content
            )
        )
    }

    func navigation<ID: Identifiable, RS: IdentifiableRoutingState<ID>, NavigationContent: View>(
        state: RS,
        id: ID.ID,
        type: NavigationType,
        didSelect: @escaping () -> Void,
        @ViewBuilder content: @escaping (RS) -> NavigationContent
    ) -> some View {
        ModifiedContent(
            content: self,
            modifier: ItemNavigation(
                state: state,
                id: id,
                type: type,
                didSelect: didSelect,
                navigationContent: content
            )
        )
    }
}
