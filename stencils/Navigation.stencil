import SwiftUI
{% if argument.includePartialSheet %}import PartialSheet{% endif %}

struct Navigation<NavigationContent: View>: ViewModifier {

    enum NavigationType {
        case fullscreen
        case hud
        case push
        case replace
        case sheet
        case cover
{% if argument.includePartialSheet %}
        case partialSheet(style: PartialSheetStyle)
{% endif %}
    }

    @ObservedObject var state: RoutingState

    private let type: NavigationType
    private let navigationContent: () -> NavigationContent

    func body(content: Content) -> some View {
        switch type {
        case .push:
            return AnyView(
                VStack {
                    NavigationLink(
                        destination: LazyView(navigationContent()),
                        isActive: $state.isPresented
                    ) {
                        EmptyView()
                    }
                    content
                }
            )
        case .hud:
             return AnyView(
                 Group {
                     content
                         .blur(radius: state.isPresented ? 3 : 0)
                         .opacity(state.isPresented ? 0.5 : 1.0)
                         .disabled(state.isPresented)
                     if state.isPresented {
                         navigationContent()
                     }
                 }
             )
        case .fullscreen:
            return AnyView(
                VStack {
                    content
                    EmptyView().fullScreenCover(isPresented: $state.isPresented) { LazyView(navigationContent()) }
                }
            )
        case .sheet:
            return AnyView(
                VStack {
                    content
                    EmptyView().sheet(isPresented: $state.isPresented) { LazyView(navigationContent()) }
                }
            )
        case .replace:
            return state.isPresented ? AnyView(navigationContent()) : AnyView(content)
        case .cover:
            return AnyView(
                Group {
                    content
                    if state.isPresented {
                        navigationContent()
                    }
                }
            )
        {% if argument.includePartialSheet %}
        case .partialSheet(let style):
            return AnyView(
                content
                    .addPartialSheet(style: style)
                    .partialSheet(isPresented: $state.isPresented) {
                        LazyView(navigationContent())
                    }
            )
        {% endif %}
        }
    }

    init(state: RoutingState, type: NavigationType, @ViewBuilder navigationContent: @escaping () -> NavigationContent) {
        self.state = state
        self.type = type
        self.navigationContent = navigationContent
    }
}

extension View {
    func navigation<NavigationContent: View>(
        state: RoutingState,
        type: Navigation<NavigationContent>.NavigationType,
        @ViewBuilder content: @escaping () -> NavigationContent
    ) -> some View {
        ModifiedContent(
            content: self,
            modifier: Navigation(
                state: state,
                type: type,
                navigationContent: content
            )
        )
    }
}
