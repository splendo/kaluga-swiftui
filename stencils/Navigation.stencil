import SwiftUI
{% if argument.includePartialSheet %}import PartialSheet{% endif %}

struct Navigation<NavigationContent: View>: ViewModifier {

    enum NavigationType {
        case fullscreen
        case hud
        case push
        case replace
        case sheet
        case cover
{% if argument.includePartialSheet %}
        case partialSheet(style: PartialSheetStyle)
{% endif %}
    }

    @ObservedObject var state: RoutingState

    private let type: NavigationType
    private let navigationContent: () -> NavigationContent

    init(state: RoutingState, type: NavigationType, @ViewBuilder navigationContent: @escaping () -> NavigationContent) {
        self.state = state
        self.type = type
        self.navigationContent = navigationContent
    }

    @ViewBuilder
    func body(content: Content) -> some View {
        switch type {
        case .push:
            VStack {
                NavigationLink(
                    destination: LazyView(navigationContent()),
                    isActive: $state.isPresented
                ) {
                    EmptyView()
                }
                content
            }
        case .hud:
             Group {
                 content
                     .blur(radius: state.isPresented ? 3 : 0)
                     .opacity(state.isPresented ? 0.5 : 1.0)
                     .disabled(state.isPresented)
                 if state.isPresented {
                     LazyView(navigationContent())
                 }
             }
        case .fullscreen:
            if #available(iOS 14.0, *) {
                content.fullScreenCover(isPresented: $state.isPresented) { LazyView(navigationContent()) }
            } else {
                content.modifier(FullScreenCoverCompat(isPresented: $state.isPresented, content: { LazyView(navigationContent()) }))
            }
        case .sheet:
            content.sheet(isPresented: $state.isPresented) { LazyView(navigationContent()) }
        case .replace:
            if state.isPresented {
                LazyView(navigationContent())
            } else {
                content
            }
        case .cover:
            Group {
                content
                if state.isPresented {
                    LazyView(navigationContent())
                }
            }
        {% if argument.includePartialSheet %}
        case .partialSheet(let style):
            content
                .addPartialSheet(style: style)
                .partialSheet(isPresented: $state.isPresented) {
                    LazyView(navigationContent())
                }
        {% endif %}
        }
    }
}

extension View {
    func navigation<NavigationContent: View>(
        state: RoutingState,
        type: Navigation<NavigationContent>.NavigationType,
        @ViewBuilder content: @escaping () -> NavigationContent
    ) -> some View {
        ModifiedContent(
            content: self,
            modifier: Navigation(
                state: state,
                type: type,
                navigationContent: content
            )
        )
    }
}

struct FullScreenCoverCompat<CoverContent: View>: ViewModifier {
  @Binding var isPresented: Bool
  let content: () -> CoverContent

  func body(content: Content) -> some View {
    GeometryReader { geo in
      ZStack {
        // this color makes sure that its enclosing ZStack
        // (and the GeometryReader) fill the entire screen,
        // allowing to know its full height
        Color.clear
        content
        ZStack {
          // the color is here for the cover to fill
          // the entire screen regardless of its content
          Color.white
          self.content()
        }
        .offset(y: isPresented ? 0 : geo.size.height)
        // feel free to play around with the animation speeds!
        .animation(.spring())
      }
    }
  }
}
