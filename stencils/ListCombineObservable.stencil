import SwiftUI
import Combine
import {{ argument.sharedFrameworkName }}

@available(*, deprecated, renamed: "CustomListObservable")
class ListCombineObservable<Output: Equatable, Input: AnyObject & Equatable>: ObservableObject {

    @Published private(set) var value: [Output]
    private var input: NSArray?
    private let disposeBag = DisposeBag()

    init(
        _ architectureObservable: ArchitectureObservable<NSArray>,
        defaultValue: [Output] = [],
        itemMapper: @escaping (Input) -> Output
    ) {
        input = architectureObservable.currentOrNull
        if input != nil {
            if let itemList = input! as? [Input] {
                value = itemList.map(itemMapper)
            } else {
                value = defaultValue
            }
        } else {
            value = defaultValue
        }
        architectureObservable
            .observe { [weak self] newValue in
                guard let self = self else {
                    return
                }
                defer {
                    self.input = newValue
                }
                guard newValue != nil, self.input != newValue else {
                    return
                }
                self.value.removeAll()
                if let itemList = newValue as? [Input] {
                    self.value = itemList.map(itemMapper)
                } else {
                    self.value = defaultValue
                }
            }
            .addTo(disposeBag: disposeBag)
    }
    deinit {
        disposeBag.dispose()
    }
}

@available(*, deprecated, renamed: "ListObservable")
class SimpleListCombineObservable<T: AnyObject & Equatable>: ListCombineObservable<T, T> {
    init(
        _ architectureObservable: ArchitectureObservable<NSArray>,
        defaultValue: [T] = []
    ) {
        super.init(
            architectureObservable,
            defaultValue: defaultValue) { $0 }
    }
}
